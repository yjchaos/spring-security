<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/security
        https://www.springframework.org/schema/security/spring-security.xsd">
    <!-- <security:http>:spring过滤器链行为配置
            1）需要拦截什么资源
            2）什么资源需要什么角色权限
            3）定义认证方式：HttpBasic，FormLogin(*)
            4）定义登陆页面，定义登陆请求地址，定义错误处理方式
     -->
    <security:http>
        <!-- isAnonymous()是只允许匿名登陆，permitAll()都是允许所有用户访问-->
        <security:intercept-url pattern="/product/index" access="permitAll()"/>
        <!-- 放通我们自己定义的登陆界面url，否则会无限重定向到该页面 -->
        <security:intercept-url pattern="/userLogin" access="permitAll()"/>
        <security:intercept-url pattern="/product/list" access="hasRole('ROLE_USER')"/>
        <security:intercept-url pattern="/product/add" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/product/update" access="hasRole('ROLE_ADMIN')"/>
        <security:intercept-url pattern="/product/delete" access="hasRole('ROLE_ADMIN')"/>
        <!--
            pattern：需要拦截资源的正则表达式，一个*代表一级路径，两个*代表任意级路径
            isFullyAuthenticated()：该资源需要认证才可以被访问
        -->
        <security:intercept-url pattern="/**" access="isFullyAuthenticated()"/>

        <!-- 使用HttpBasic方式进行登陆（认证）-->
<!--        <security:http-basic/>-->

        <!-- 使用表单登陆，默认spring会提供一个表单
            login-page:配置自己的登陆页面，要注意配置了自己的登陆页面之后，它会被拦截，然后就无限进登陆界面，所以我们要
                在上面拦截器配置上放通该url
            login-processing-url:可以配置处理登陆请求的url，默认是/login，参考UsernamePasswordAuthenticationFilter，
                如果改了这个参数，记得要把登陆界面中表单的提交路径改成一致
        -->
        <security:form-login login-page="/userLogin" login-processing-url="/securityLogin"
                             authentication-success-handler-ref="myAuthenticationSuccessHandler"
                             authentication-failure-handler-ref="myAuthenticationFailHandler"/>

        <!-- 自定义权限不足处理方式 -->
        <security:access-denied-handler error-page="/error"/>

        <!-- 关闭csrf，否则post请求都要求参数中有_csrf，而我们提供的登陆界面中的登陆表单并没有_csrf字段，就会报错-->
        <security:csrf disabled="true"/>
    </security:http>

    <!-- <security:authentication-manager>:认证管理器
            1）认证信息提供方式（账户名，密码，当前用户权限）
     -->
    <security:authentication-manager>
        <security:authentication-provider user-service-ref="myUserDetailService">
<!--            <security:user-service>-->
<!--                <security:user name="eric" password="123456" authorities="ROLE_USER"/>-->
<!--                <security:user name="jack" password="123456" authorities="ROLE_ADMIN"/>-->
<!--            </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="myUserDetailService" class="org.yj.security.MyUserDetailService"/>

    <bean id="myAuthenticationSuccessHandler" class="org.yj.security.MyAuthenticationSuccessHandler"/>

    <bean id="myAuthenticationFailHandler" class="org.yj.security.MyAuthenticationFailHandler"/>
</beans>